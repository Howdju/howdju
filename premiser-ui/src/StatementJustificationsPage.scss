@import '~react-md/src/scss/react-md';
@import './flatui-colors';
@import './colors';
@import './grid';

$agreement: $emerald;
$disagreement: $pomegranate;
$gradient-start-opacity: .6;
$gradient-point: 25%;
$slide-size: $md-btn-icon-size;

// All must be less than $md-toolbar-z-index (default 15) or else they will float above the toolbar upon scrolling
// ($md-menu-z-index is 10)
$gradient-z-index: 5;
$over-gradient-z-index: 10;

.context-menu--statement {
  z-index: $over-gradient-z-index;
  .md-list--menu {
    z-index: $over-gradient-z-index + 1;
  }
}

.context-menu {
  float: right;

  .hidden {
    .md-icon {
      display: none;
    }
  }
}

.statement {
  // Animate gradients with this trick:
  // https://medium.com/@dave_lunny/animating-css-gradients-using-only-css-d2fd7671e759

  // Provide a background color for the card, which we make transparent
  background: get-color('card', $md-light-theme);

  .statementCard {

     .statementText {
       z-index: $over-gradient-z-index;
     }

    background: inherit;
    background-size: 100%;
    position: relative;
    // Don't use this part of the trick; messing with z-index can break material design
    //z-index: 100;

    &:before {
      background: linear-gradient(to right,
              rgba($agreement, $gradient-start-opacity) 0%,
              rgba($agreement, 0) $gradient-point,
              rgba($agreement,0) 100%
      );

      content: '';
      display: block;
      height: 100%;
      position: absolute;
      top: 0; left: 0;
      opacity: 0;
      width: 100%;
      // Place this above the .statement in the local stacking context
      z-index: $gradient-z-index;
      transition: opacity 0.4s;
    }
    // Extend the trick to have both a before and after
    &:after {
      background: linear-gradient(to left,
              rgba($disagreement, $gradient-start-opacity) 0%,
              rgba($disagreement,0) $gradient-point,
              rgba($disagreement, 0) 100%
      );

      content: '';
      display: block;
      height: 100%;
      position: absolute;
      top: 0; left: 0;
      opacity: 0;
      width: 100%;
      // Place this above the .statement in the local stacking context
      z-index: $gradient-z-index;
      transition: opacity 0.4s;
    }
    &.agreement:before {
      opacity: 1;
    }
    &.disagreement:after {
      opacity: 1;
    }
  }
}

.justification-tree {

  .actions {
    // Create a local stacking context
    z-index: 0;

    & > * {
      transition: opacity 0.2s, right 0.4s, left 0.4s;
      position: relative;
      right: 0;

      &.verified, &.disverified {
        color: $midnight-blue;
        // Put the selected buttons (which will remain visible while others fade) above them
        z-index: 1;
      }
      &.disverified.inactive {
        right: $slide-size;
      }

      &.hiding {
        right: $slide-size;
        opacity: 0;
      }
    }
  }

  .otherSelected .md-icon {
    color: $concrete;
  }

  .md-list--menu {
    // Menus will always be ltr
    direction: ltr;
  }

  .actions {
    // Hide the actions as they slide off-screen; else they create horizontal scroll bars
    // It would be nicer to do this as far out as possible, so as to avoid any clipping of the icons
    // but this works for now.  Adding this to the .justification-card is a problem because then the dropdown
    // menu is cipped.
    overflow: hidden;
  }

  &.positivey {

    & > * > .actions {
      // Override App.scss .md-dialog-footer--card
      justify-content: flex-start;

      .md-icon {
        // When positivey, the icons make more sense flipped
        transform: scaleX(-1);
      }
    }

    & > .counter-justifications {
      margin-left: 30px;
    }
  }

  &.negativey {

    & > * > .actions {
      justify-content: flex-start;
      direction: rtl;

      .md-icon {
        transform: none;
      }

      & > * {
        left: 0;
        right: auto;

        &.disverified.inactive {
          left: $slide-size;
          right: auto;
        }

        &.hiding {
          left: $slide-size;
          right: auto;
          opacity: 0;
        }
      }
    }

    & > .counter-justifications {
      margin-right: 30px;
    }
  }
}

#combined-justifications {
  & > .justification-tree {
    &.positivey {
      margin-right: 30px;
    }
    &.negativey {
      margin-left: 30px;
    }
  }
}